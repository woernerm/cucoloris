{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cucoloris Cucoloris is a library that brings the well-known and beloved look of Bootstrap to Kivy . The library is named after a device common in the film industry for simulating shadow patterns that give the scene a more natural look. Like Bootstrap, the library offers widgets that you can use for your application. The names are almost identical to those in Bootstrap. However, class names are written in camel-case instead of kebab-case, because Python does not allow for dashes in class names. This allows you to refer to the Bootstrap documentation to try out and select the component you would like to add and quickly find it in Cucoloris as well. While the look of Cucoloris closely resembles that of Bootstrap, it also offers additional functionality that may not be part of Bootstrap. For example, Cucoloris' FormControl (resembling form-control in Bootstrap) also offers the ability to enter formatted text and its scroll bar has rounded edges to better fit the component. The development of Cucoloris is in an early stage and the API might change. Thus far, the following widgets are available: Buttons Default buttons like BtnPrimary, BtnSecondary, BtnSuccess, etc. Outline buttons: BtnOutlinePrimary, BtnOutlineSecondary, BtnOutlineSuccess, etc. Forms: FormControl","title":"Home"},{"location":"#cucoloris","text":"Cucoloris is a library that brings the well-known and beloved look of Bootstrap to Kivy . The library is named after a device common in the film industry for simulating shadow patterns that give the scene a more natural look. Like Bootstrap, the library offers widgets that you can use for your application. The names are almost identical to those in Bootstrap. However, class names are written in camel-case instead of kebab-case, because Python does not allow for dashes in class names. This allows you to refer to the Bootstrap documentation to try out and select the component you would like to add and quickly find it in Cucoloris as well. While the look of Cucoloris closely resembles that of Bootstrap, it also offers additional functionality that may not be part of Bootstrap. For example, Cucoloris' FormControl (resembling form-control in Bootstrap) also offers the ability to enter formatted text and its scroll bar has rounded edges to better fit the component. The development of Cucoloris is in an early stage and the API might change. Thus far, the following widgets are available: Buttons Default buttons like BtnPrimary, BtnSecondary, BtnSuccess, etc. Outline buttons: BtnOutlinePrimary, BtnOutlineSecondary, BtnOutlineSuccess, etc. Forms: FormControl","title":"Cucoloris"},{"location":"api-documentation/","text":"cucoloris cucoloris._settings Defines a class for settings. The settings class is used to select the correct settings, e.g. font, for the current system. Settings Objects class Settings() Class for determining the correct settings. Settings like the font and corrective font offset (to move the font baseline up or down for correct vertical centering) are determined by this class. These depend on the platform and the font being used. For example, on Windows, Segoe UI is used as font. Unfortunately, that font has a weird baseline, making it appear off-center, even if centered vertically. Therefore, the text has to be moved slightly. get_font_name | @staticmethod | get_font_name() -> str Returns the font name to be used for the current platform. Returns : Font name appropriate for the current platform. get_font_baseline_offset | @staticmethod | get_font_baseline_offset() -> int Returns a corrective offset in y-direction. On Windows, Segoe UI is used as font. Unfortunately, that font has a weird baseline, making it appear off-center, even if centered vertically. Therefore, the text has to be moved slightly. How much, it needs to move is determined by the returned value. Returns : Vertical offset in pixels. get_scroll_threshold | @staticmethod | get_scroll_threshold() -> int Determines scroll_distance of a ScrollView widget. On a mobile device it makes sense to have a threshold before starting to scroll down. However, on a desktop computer, this behavior can quickly become annoying. Therefore, this threshold is chosen depending on the current platform. get_scroll_type | @staticmethod | get_scroll_type() -> list Determines scroll_type of a ScrollView widget. On a mobile device it makes sense to have scroll down content by touching the text. However, on a desktop computer, this# behavior can quickly become annoying. In addition, it makes selecting text more difficult on a desktop computer. Therefore, the behavior is chosen depending on the platform. cucoloris.plaininput Defines a text input that fixes some bugs in Kivy. PlainInput Objects class PlainInput(_TextInput) Class that provides a plain text input area. Although there is already a text input provided in Kivy, there seems to be a bug in that widget's cursor position (at least in kivy 2.0). If one types in text and reaches the end of a non-multiline text input, the cursor may overflow the text input, i.e. the cursor is outside the text input widget. This is even more present if a long text is pasted into the widget. Then, the cursor will be way outside the widget. To work around that issue, this class inherits from Kivy's text input and overwrites the necessary function. The cursor position is compared with the position of the right border of the text input. If the cursor is right of the text input, the cursor is moved to the left and to the right. This will put the cursor back into the confines of the text input. Since the movement is first left, then right, there will be no movement in sum. insert_text | insert_text(substring: str, from_undo: bool = False) Overwritten version of insert_text to fix the Kivy bug. Arguments : substring - The string to be added to the widget. from_undo - Set to True, if the substring is a result of an undo operation, False otherwise. Returns : The return value of the base classes version of the method. cucoloris._scrollbar Defines a scroll bar that fits the rounded edges of other widgets. The standard scroll bar of a ScrollView widget has sharp corners. However, that does not fit the rounded Bootstrap shapes well. Therefore, this widget defines a new scroll bar with rounded corners and the ability to define separate border and fill colors of the scroll bar. ScrollBar Objects class ScrollBar(_Box) Widget for a scroll bar with rounded corners. The standard scroll bar of a ScrollView widget has sharp corners. However, that does not fit the rounded Bootstrap shapes well. Therefore, this widget defines a new scroll bar with rounded corners and the ability to define separate border and fill colors of the scroll bar. bar_orientation The orientation of the scroll bar. The orientation value may either be 'vertical' or 'horizontal'. bar_length The length of the scroll bar in pixels. Typically, the length of the scroll bar depends on the ratio of the scroll areas size and the size of the document being scrolled. STR_VERTICAL Constant defining the vertical scroll bar orientation value. STR_HORIZONTAL Constant defining the horizontal scroll bar orientation value. bar_width The width of the scroll bar in pixels. The width of the scroll bar can be set to taste. It is given in pixels. on_bar_orientation | on_bar_orientation(_, orientation: str) Determines the validity of the selected orientation value. This is a callback method determines whether the selected orientation value is valid or not. If the value is valid, the scroll bar geometry gets updated. If the valid is invalid, an Exception is raised. Arguments : orientation - The desired orientation of the scroll bar. Can be either 'vertical' or 'horizontal'. on_bar_length | on_bar_length(_, length: int) Callback for scroll bar length changes. This is a callback method that gets called whenever the length of the scroll bar is changed. It then triggers an update of the scroll bar's dimensions. Arguments : length - The desired length of the scroll bar in pixels. cucoloris.background Defines a background widget to create a single-color background. Background Objects class Background(_Widget) Simple single-color background. Kivy does not provide a background by default. This widget adds one that you can select the color of. color Color of the background. The color must be given as RGB values, each between 0 and 1. __init__ | __init__(color: _Optional[list] = None, **kwargs) Initialization method of the widget. Arguments : color - The color of the background given as RGB values, each between 0 and 1. **kwargs - Keyed arguments passed on to the base class of the widget. cucoloris.markupinput Defines a text input widget with markup support. MarkupInput Objects class MarkupInput(_Widget) A text input widget with markup support. Kivy's standard text input field has some bugs at the time of this writing (version 2.0). For example, the caret may leave the text input area, if text is pasted inside the input. Therefore, Cucoloris offers improved replacements, one with the addition of markup support. If the text field has focus, the text can be edited in plain text mode. Markup as described in https://kivy.org/doc/stable/api-kivy.core.text.markup.html. Markup commands can be mixed with other text. Once focus is lost, the text field is displayed with all markup formatting applied. This is done by overlaying a TextField widget with a Label widget. Opacity of the two is toggled between zero and one depending on whether to display plain or formatted text. text The text in the widget. markup Switch to enable or disable markup support. Set to True if you want the widget to support markup commands. False, otherwise. foreground_color Color of the text. The color is given as a list of RGBA values between 0 and 1. cursor_color Color of the caret inside the text input. The color is given as a list of RGBA values between 0 and 1. selection_color Color of the text selection. Note that the text selection is drawn on top of the text. Therefore, the selection color should have an alpha value. The color is given as a list of RGBA values between 0 and 1. hint_text_color Color of the hint text. The hint text is shown to the user to indicate what to type into the text input. The color is given as a list of RGBA values between 0 and 1. hint_text The hint text to be shown to the user. Hint texts are used to indicate what the user is supposed to type. It can be used as an alternative to other element labels. suggestion_text Suggestion text to display to the user. Suggestion texts can be used to increase typing speed by indicating what the user might want to type in advance. It can also act as a technique to remove dropdowns by displaying the closest values the FormControl widget is able to accept. background_color The background color of the text input. The color is given as a list of RGBA values between 0 and 1. multiline Switch to enable or disable multiline text. Set to True, if you want the widget to support multiple lines of text. Set to False, otherwise. write_tab Switch for either writing tabs or switching between widgets. You may select, whether a tab should lead to a loss of focus on the widget (True) or the tab is written as text into the text input (False). line_spacing Space between two consecutive lines. More space increases clarity but also requires a larger widget to display the same number of lines. on__edit | on__edit(_, __) Toggle opacity on focus. Binds a callback method to a focus event of the TextField widget to toggle the opacity whenever the widget acquires or loses focus. on_focus | on_focus(_, infocus) Focus callback. The focus callback toggles the opacity between the PlainInput and the label widget. on_markup | on_markup(_, __) Callback method for switching markup modes. Depending on whether to use markup or not, the opacity of the PlainInput and Label child widgets is toggled. cucoloris.formcontrol Defines a text input, equivalent to Boostrap's form-control class. In addition to standard text input functionality, the FormControl widget also supports markup text, i.e. the user can use BBCode markup commands like [b]my text[/b] to make it bold or [i]my text[/i] to make the text italic. Details about the markup commands are provided in Kivy's documentation: https://kivy.org/doc/stable/api-kivy.core.text.markup.html FormControl Objects class FormControl(_Box) Text input widget similar to Bootstrap's form-control class. In addition to standard text input functionality, the FormControl widget also supports markup text, i.e. the user can use BBCode markup commands like [b]my text[/b] to make it bold or [i]my text[/i] to make the text italic. Details about the markup commands are provided in Kivy's documentation: https://kivy.org/doc/stable/api-kivy.core.text.markup.html text_color The color of the text. The color has to be given as a list of RGBA values between 0 and 1. border_color_focus The color of the border on focus. The color has to be given as a list of RGBA values between 0 and 1. border_color_normal The color of the border without focus. The color has to be given as a list of RGBA values between 0 and 1. text The text displayed in the widget. The text may contain markup commands as described in the Kivy documentation: https://kivy.org/doc/stable/api-kivy.core.text.markup.html padding The text padding in pixels. The text is padded to give it some space inside the box shape it resides in. The padding is given in pixels. scroll_bar_width The width of the scroll bar in pixels. The width of the scroll bar can be set to taste. It is given in pixels. num_lines The number of lines the FomControl widget shall display. This is the number of lines that are shown simultaneously without the need for scrolling. This attribute also determines the size of the widget, i.e. the widget's size attribute is set depending on the value of this attribute. line_spacing Space between two consecutive lines. More space increases clarity but also requires a larger widget to display the same number of lines. selection_color The color of text selection. The selection indication is drawn on top of the text. Therefore, the color should always have an alpha component. The color is given as RGBA values between 0 and 1. hint_color Color of text hints. Text hints can be shown to indicate what the user should type. The color is given as a list of RGBA values between 0 and 1. bar_fill_color Fill color of the scroll bar. The color is given as a list of RGBA values between 0 and 1. bar_border_color Color of the scroll bar's border. The color is given as a list of RGBA values between 0 and 1. hint_text The hint text to be shown to the user. Hint texts are used to indicate what the user is supposed to type. It can be used as an alternative to other element labels. font_size The font size to use for the FormControl widget. The font size is given in pixels. suggestion_text Suggestion text to display to the user. Suggestion texts can be used to increase typing speed by indicating what the user might want to type in advance. It can also act as a technique to remove dropdowns by displaying the closest values the FormControl widget is able to accept. markup Determines, whether markup is recognized or not. If you want to allow for text formating using markup commands as described in the Kivy documentation (https://kivy.org/doc/stable/api-kivy.core.text.markup.html), you can set this attribute to True. If you want the FormControl widget to accept plain text only, set the value to False. __init__ | __init__(text: _Optional[str] = None, hint_text: _Optional[str] = None, suggestion_text: _Optional[str] = None, markup: bool = True, font_size: _Optional[str] = None, num_lines: _Optional[int] = None, **kwargs) Initialization method of the class. Arguments : text - The text to display in the widget. hint_text - The hint text to indicate what the user is supposed to type. suggestion_text - Suggestive text to indicate what the user might want to type next. markup - Set to True, if you want to allow text formatting using a BBCode like syntax described in https://kivy.org/doc/stable/api-kivy.core.text.markup.html. Set to False, if you want the FormControl widget to accept plain text only. font_size - The size of the font used in the widget given in pixels, e.g. '16sp'. num_lines - The number of lines to display without the need for scrolling. This parameter also determines the size of the FormControl widget. **kwargs - Keyed parameters passed on to the base class. on_border_color_normal | on_border_color_normal(_, color) Sets the border color, if the nominal color is changed. Arguments : color - The new nominal color of the border. on__input | on__input(_, __) Set the font according to the current platform. There is a vertical offset for the Windows system font Segoe UI. Although the text input might be centered, the font still is not. For that reason, the padding option for Kivy's textinput widget was not used. Instead, the whole textinput is moved slightly up or down depending on the current platform. on__scroll | on__scroll(_, __) Callback for scroll events. on_edit_focus | on_edit_focus(_, value) Callback for touching the Focusable. Arguments : widget - The widget the method was called from. value - Value 1, if the widget has focus, 0 otherwise. on_cursor_row | on_cursor_row(_, __) Callback for automatic scrolling. In a multi-line textinput, the ScrollView will not automatically scroll down if the user's text becomes too long. Using this callback, the textinput is automatically scrolled down or upwards, always keeping the cursor within the viewport. cucoloris._colorarea Module for a color changing rectangle. This module defines the most basic shape that almost all other widgets are composed of. It is a rectangle with rounded corners that can smoothly transition to another color or resize itself. A widget that directly builds upon that functionality is RectangleElement. It is composed of two ColorArea classes to define a filled rectangle, i.e. one separate border and fill colors each of which inherit the smooth color transition functionality. ColorArea Objects class ColorArea(_Widget) Rounded rectangle with animated color transitions. The ColorArea widget is a rectangle with rounded corners that can smoothly change color. The user of this class can do this using two methods: modify: The nominal color of the widget is modified in HSV-space (hue, saturation and value) using a smooth color transition. The values given are not absolute ones but differences to the current nominal color. The modification can be easily undone by calling the function with zero values for all HSV-components. recolor: Changes the nominal color by smoothly transitioning to the given color in RGBA-space (red, green, blue, alpha). color The nominal color of the widget in RGBA-space. The color is described as a list of float values between 0 and 1. It is interpreted in RGBA-space, i.e. [red, green, blue, alpha]. radius The radius of each corner of the widget in pixels. The ColorArea widget is a rounded rectangle. Each of the four corners may have a different radius given in pixels, e.g. [2, 4, 3, 8]. transition Transition time in seconds. The ColorArea widget transitions smoothly between colors. The time it shall take from one color state to another can be set using this attribute. __init__ | __init__(size: _Optional[_List[int]] = None, radius: _Optional[_List[int]] = None, color: _Optional[_List[float]] = None, transition: _Optional[float] = None, **kwargs) Initialization method of the class. The initialization method initializes the base class and creates a rounded rectangle on the widget's canvas. Other parameter that shall be passed on to the base class may be given using the args and *kwargs parameters. Arguments : *args - Any positional arguments that shall be passed on to the base class (Widget). **kwargs - Any keyed arguments that shall be passed on to the base class (Widget). on_size | on_size(_, size: int) Callback for size change events. Whenever the size of the widget is changed, the canvas needs to be updated. This is done in this method. Note that this method is not meant to be called by the user. Arguments : widget - The widget the method was called from. size - The new size value. on_radius | on_radius(_, radius: _List[int]) Callback for radius change events. Whenever the radius of at least one of the widget's corners is changed, the canvas needs to be updated. This is done in this method. Note that this method is not meant to be called by the user. Arguments : widget - The widget the method was called from. radius - The new radius value. on_pos | on_pos(_, pos: _List[int]) Callback for position change events. Whenever the position of the widget is changed, the canvas needs to be updated. This is done in this method. Note that this method is not meant to be called by the user. Arguments : widget - The widget the method was called from. pos - The new position value. on_color | on_color(_, color: _List[float]) Callback for changing the nominal (unmodified) color. Whenever a color transition is performed using the recolor() method, this callback-method is called by Kivy's Animation class whenever there is a change in color. Note that this method is not meant to be called by the user. Arguments : widget - The widget the method was called from. color - The new color value. on__hsv | on__hsv(_, hsv: _List[float]) Callback for animating the color modification in hsv space. In order to avoid weired looking color transitions, a modification of the widget's color is done in HSV-space. Therefore, this method is called whenever Kivy's Animation class calls it. Note that this method is not meant to be called by the user. Arguments : widget - The widget the method was called from. hsv - The new hsv value. modify | modify(hsv: _List[float]) Shifts the widget's color in HSV-space. Modifies the nominal color of the widget in HSV-space (hue, saturation and value) using a smooth color transition. The given values are not absolute ones but differences to the current nominal color. For example, to make a widget with name myWidget slightly darker, one may call to reduce the widget's value (meaning brightness) by 0.2. The modification can be easily undone by calling the function with zero values for all HSV-components, e.g.: myWidget.modify([0, 0, -0.2]) myWidget.modify([0, 0, 0]) Arguments : hsv - List of hue, saturation, and value (brightness) values to shift the color of the widget. recolor | recolor(rgba: _List[float]) Changes the nominal color of the widget. Changes the nominal color by smoothly transitioning to the given color. The color to transition to is given as a list of float values between 0 and 1 in RGBA-space, i.e. [red, green, blue, alpha]. Unlike the modify-method, the change cannot be undone just as easily. For that, the user needs to store the old color in another variable and call recolor with that variable again. Arguments : rgba - The new color as a list in RGBA-space to transition to. Each list component is a float value between 0 and 1. resize | resize(targetsize: _List[int], targetradius: _Optional[_List[int]] = None) Starts an animated change of the widget's size and radius. The method smoothly resizes the widget relative to its center. Both, the widget size and its radius are transformed. Arguments : targetsize - List of the size in pixels in x- and y-direction to grow or shrink the widget to. targetradius - List of radii in pixels for each of the four corners to grow or shrink to. The parameter is optional. If not given, the radius of each corner will be automatically scaled according to the given targetsize. However, it is recommended to explicitly provide a radius every once in a while (if the method is used multiple times) to avoid a summation of rounding errors. cucoloris._colorlabel Defines a label that can change color. The color shift is animated. This can be used for link-style text. ColorLabel Objects class ColorLabel(_Label) Label widget that can shift its color. The color shift is animated. This can be used for link-style text. nominal_color Nominal, i.e. unmodied color of the label. The color must be given as RGBA values, each between 0 and 1. transition Transition time in seconds. The ColorLabel widget transitions smoothly between colors. The time it shall take from one color state to another can be set using this attribute. text The text of the label. __init__ | __init__(text: _Optional[str] = None, nominal_color: _Optional[list] = None, transition: _Optional[int] = None, **kwargs) Initialization method of the class. Arguments : text - The text of the label. nominal_color - The nominal, i.e. unmodified color of the transition - The time it takes to transition from one color to another. on_nominal_color | on_nominal_color(_, color) Callback for changing the color. This callback method changes the nominal, i.e. unmodified color of the widget. Arguments : color - The new color value. on__hsv | on__hsv(_, hsv) Callback for animating the color modification in hsv space. The color modification takes place in hue, saturation, value space in order to avoid weird red color shifts moving through several different hues instead of just the brightness (value) component of the color. Arguments : widget - The widget the method was called from. hsv - The new hsv value. modify | modify(hsv) Shifts the widget's color in HSV-space. Modifies the nominal color of the widget in HSV-space (hue, saturation and value) using a smooth color transition. The given values are not absolute ones but differences to the current nominal color. For example, to make a widget with name myWidget slightly darker, one may call to reduce the widget's value (meaning brightness) by 0.2. The modification can be easily undone by calling the function with zero values for all HSV-components, e.g.: myWidget.modify([0, 0, -0.2]) myWidget.modify([0, 0, 0]) Arguments : hsv - List of hue, saturation, and value (brightness) values to shift the color of the widget. recolor | recolor(color) Changes the nominal color of the widget. Changes the nominal color by smoothly transitioning to the given color. The color to transition to is given as a list of float values between 0 and 1 in RGBA-space, i.e. [red, green, blue, alpha]. Unlike the modify-method, the change cannot be undone just as easily. For that, the user needs to store the old color in another variable and call recolor with that variable again. Arguments : rgba - The new color as a list in RGBA-space to transition to. Each list component is a float value between 0 and 1. cucoloris._box Module for a basic box shape. This module defines a basic box with optional shadow. It has separate shadow, border and fill colors as well as rounded corners. The box is composed of three ColorArea widgets which are set up as public attributes so that they can be accessed and modified individually. Box Objects class Box(_Widget) Widget for a basic box shape. The widget represents a basic box with optional shadow. It has separate shadow, border and fill colors as well as rounded corners. The box is composed of three ColorArea widgets which are set up as public attributes so that they can be accessed and modified individually. Since each child is a ColorArea widget, the box supports smooth color transitions and size changes for each child widget. The box can detect touch and hover events that can be used to trigger custom color transitions and size changes from any derived class. radius The radius of each corner of the widget in pixels. The Box widget is a rounded rectangle. Each of the four corners may have a different radius given in pixels, e.g. [2, 4, 3, 8]. border_width The width of the widget's border. There is a solid border drawn around the widget. The width of that border can be set using this attribute. shadow_width The width of the widget's shadow. The widget can be highlighted by a shadow in order to indicate focus or to give the widget a three-dimensional look. The width of that shadow can be adjusted by this attribute. fill_color The fill color of the widget. The widget is composed of three ColorArea widgets. The color of the innermost ColorArea can be set by this attribute. It represents the fill color of the Box widget. border_color The color of the widget's border. There is a solid border drawn around the widget. The color of that border can be set using this attribute. shadow_color The color of the widget's shadow. The widget can be highlighted by a shadow in order to indicate focus or to give the widget a three-dimensional look. The color of that shadow can be adjusted by this attribute. transition Transition time in seconds. The box widget can be highlighted by a shadow in order to indicate focus. The shadow smoothly appears from behind the widget. The time it takes for the shadow to reach its final size is determined by this attribute. The attribute is also the speed with which each component can transition to another color, if needed. fill The ColorArea widget representing the fill color. The widget is composed of three ColorArea widgets. The innermost one represents the fill color. It can be accessed directly through this attribute for more control. border The ColorArea widget representing the border. The widget is composed of three ColorArea widgets. The one on the middle layer represents the border color. It can be accessed directly through this attribute for more control. shadow The ColorArea widget representing the shadow. The widget is composed of three ColorArea widgets. The outermost widget represents the shadow. It can be accessed directly through this attribute for more control. __init__ | __init__(*args, **kwargs) Initialization function of the widget. The init method is typically called without arguments. Any arguments given are passed on the the base class Widget. Arguments : *args - Positional arguments passed on to the base class. **kwargs - Keyed arguments passed on to the base class. bind | bind(**kwargs) Bind a callback function to one an event. The Box widget can react to multiple events and call a specified callback function whenever such an event occurs. The following events are available: * on_enter: The mouse enters the widget space. * on_leave: The mouse leaves the widget space. * on_down: There is a touch or click on the widget. * on_release: The touch or click is released. * on_drag: There was a touch or click on the widget and the input device is now moved without releasing the touch or click. Arguments : **kwargs - Keyed argument list to be passed on to the bound callback function. show_shadow | show_shadow() Highlights the widget by a shadow. The box widget can be highlighted by a shadow in order to indicate focus. The shadow smoothly appears from behind the widget. If focus is lost, the shadow can disappear. This method highlights the widget by a shadow. hide_shadow | hide_shadow() Hides the shadow of the widget. The box widget can be highlighted by a shadow in order to indicate focus. The shadow smoothly appears from behind the widget. If focus is lost, the shadow can be hidden by using this method. ispressed | ispressed() Returns, whether the Box is currently touched. The method will return true, if the Box widget is currently touched, i.e. the touch occured within or on the widget's border (the shadow is ignored) and has not yet been released. The method will also return true, if the touch device leaves the widget without releasing the touch (dragging). Returns : bool - True, if the widget is currently touched. False, otherwise. ishover | ishover() Returns, whether the cursor is hovering over the widget. The method will return true, if the cursor is currently hovering on or within the widget's border (the shadow is ignored). Returns : bool - True, if the cursor is currently hovering over the widget. False, otherwise. on_mouse_pos | on_mouse_pos(_, pos: _List[int]) Callback function for detecting mouse movements. The method is called for each cursor movement. It is used to detect, whether the cursor hovers over the box. If the cursor starts to hover over or leaves the Box, then the callback functions for 'on_enter' or 'on_leave' are called, respectively. Note that the user must have bound a callback functions to those events prior to the event's occurrence. Otherwise, nothing happens. Arguments : pos - The new position value. on_touch_down | on_touch_down(touch: _MotionEvent) Callback function for detecting touches. The method is called for each touch / click from the user. The method checks whether the touch was performed on or within the border of the Box (the shadow is ignored). If so, it calls a callback function that was bound to the event 'on_press' using the bind() method of this class. Arguments : touch - Information about the touch. on_touch_up | on_touch_up(touch: _MotionEvent) Callback function for detecting touch or click releases. The method is called whenever a prior touch / click is released. If so, it calls the callback function that was bound to the event 'on_press' using the bind() method of this class. Arguments : touch - Information about the touch. on_touch_move | on_touch_move(touch: _MotionEvent) Callback function for detecting a dragging movement. The method is called whenever the input devices moves. It checks whether there was a touch or click on the Box before which corresponds to dragging the Box. If so, the methods calls the callback function that was bound to the event 'on_drag' using the bind() method of this class. Arguments : touch - Information about the touch. cucoloris.button Defines solid and outline button widgets. This file defines button widgets for solid and outline buttons similar to the Bootstrap classes btn-primary, btn-secondary, btn-outline-primary, btn-outline-secondary, etc. Btn Objects class Btn(_FocusBehaviour, _Box) Widget for drawing a touchable / clickable button. This widget is the base class of a button that has similar behavior to the btn class of Bootstrap. From this base class the classes SolidButton and OutlineButton are derived modelling buttons similar to the btn and btn-outline classes of Bootstrap. padding Padding of the button's label in pixels. Buttons use the system fonts available on the device. Some fonts may have slightly weird baselines, e.g. Segoe Ui on Windows. Therefore, the padding is adjusted based on the font used. font_size The font size used for the button's label in pixels. underline Determines, whether the button's label text is underlined. An underline is typically used for hyperlinks. The value can be either True (text will be underlined) or False (text will not be underlined). hover_fill HSV-color fill offsets used for hovering. If the cursor hovers over the button, its fill color is slightly modified. More precisely, its hue, saturation and brightness values are shifted by the amount specified with this attribute. Note that the values range from 0 to 1. press_fill HSV-color fill offsets used, if the button is pressed. If the button is pressed, its fill color is slightly modified. More precisely, its hue, saturation and brightness values are shifted by the amount specified with this attribute. Note that the values range from 0 to 1. hover_text HSV-color text offsets used for hovering. If the cursor hovers over the button, its text color is slightly modified. More precisely, its hue, saturation and brightness values are shifted by the amount specified with this attribute. Note that the values range from 0 to 1. press_text HSV-color text offsets used, if the button is pressed. If the button is pressed, its text color is slightly modified. More precisely, its hue, saturation and brightness values are shifted by the amount specified with this attribute. Note that the values range from 0 to 1. text_color The default color of the button text. The color of the button text needs to be specified as RGBA values between 0 and 1. text The text with which the button is labeled. The button text also determines the button's overall size. __init__ | __init__(text: str = None, font_size: str = None, text_color: _List = None, underline: bool = False, **kwargs) Initialization method of the class. Arguments : text - The text of the button. font_size - The font size of the button text in pixels. text_color - The color of the button text as RGBA values between 0 and 1. underline - Set to True to underline the button text. False, otherwise. **kwargs - Keyed arguments passed on to the base classes. on_enter | on_enter(_) Callback for cursor hover events. If the cursor enters the button area and hovers over it, this callback method is called. It can be used to modify the button's colors. on_leave | on_leave(_) Callback for end of hover events. If the cursor leaves the button area and stops to hovers over it, this callback method is called. It can be used to modify the button's colors. on_release | on_release(_) Callback for button release events. If the button is released, this callback method is called. on_press | on_press(_) Callback for button press events. If the button is pressed, this callback method is called. on_focus | on_focus(_, value: bool) Callback for button focus events. If the button gets focus, this callback method is called. One can focus on the button by either pressing it or pressing tab until the button is focused on. on__label | on__label(_, __) Callback method for initializing the label. If the button label is initialized, this method is called. It is used to set the default font, font_size and padding depending on the host device and selected color scheme. SolidBtn Objects class SolidBtn(Btn) This widget represents a button with solid fill color. The widget represents a button similar to the typical Bootstrap buttons btn-primary, btn-secondary, etc. It can shift its color while the cursor is hovering over it or the button is pressed. There is also a shadow surrounding the button to indicate focus. on_enter | on_enter(hover: bool) Callback for cursor hover events. If the cursor enters the button area and hovers over it, this callback method is called. It can be used to modify the button's colors. Arguments : hover - True, if the cursor hovers over the button. False, otherwise. on_leave | on_leave(hover: bool) Callback for end of hover events. If the cursor leaves the button area and stops to hovers over it, this callback method is called. It can be used to modify the button's colors. Arguments : hover - True, if the cursor hovers over the button. False, otherwise. on_release | on_release(touch: _MotionEvent) Callback for button release events. If the button is released, this callback method is called. Arguments : touch - Motion event with more information about the release. on_focus | on_focus(_, value: bool) Callback for button focus events. If the button gets focus, this callback method is called. One can focus on the button by either pressing it or pressing tab until the button is focused on. Arguments : value - True, if the button has focus. False, otherwise. on_press | on_press(touch: _MotionEvent) Callback for button press events. If the button is pressed, this callback method is called. Arguments : touch - Motion event with more information about the release. SolidLinkBtn Objects class SolidLinkBtn(SolidBtn) A button with a solid fill color for links. The solid link button has a similar hover animation to SolidBtn. However, the color transition is applied to the link text only. on_leave | on_leave(hover: bool) Callback for end of hover events. If the cursor leaves the button area and stops to hovers over it, this callback method is called. It can be used to modify the button's colors. Arguments : hover - True, if the cursor hovers over the button. False, otherwise. OutlineBtn Objects class OutlineBtn(Btn) Button widget with no fill color. The outline button has a hover animation that transitions its fill color from background color to the border color while often switching the text color from border color to white. It is similar to the Bootstrap button classes btn-outline-primary, btn-outline-secondary, etc. on_enter | on_enter(_) Callback for cursor hover events. If the cursor enters the button area and hovers over it, this callback method is called. It can be used to modify the button's colors. on_leave | on_leave(_) Callback for end of hover events. If the cursor leaves the button area and stops to hovers over it, this callback method is called. It can be used to modify the button's colors. on_release | on_release(_) Callback for button release events. If the button is released, this callback method is called. on_focus | on_focus(_, value: bool) Callback for button focus events. If the button gets focus, this callback method is called. One can focus on the button by either pressing it or pressing tab until the button is focused on. Arguments : value - True, if the button has focus. False, otherwise. on_press | on_press(touch: _MotionEvent) Callback for button press events. If the button is pressed, this callback method is called. Arguments : touch - Motion event with more information about the release. cucoloris._scrollarea Defines a ScrollArea widget. Kivy's ScrollView widget has a scroll bar with sharp corners. However, that does not fit the rounded Bootstrap shapes well. Therefore, this widget has the same functionality as the original ScrollView but uses the ScrollBar widget, a scroll bar with rounded edges. ScrollArea Objects class ScrollArea(_Widget) Replacement for Kivy's ScrollView widget. Kivy's ScrollView widget has a scroll bar with sharp corners. However, that does not fit the rounded Bootstrap shapes well. Therefore, this widget has the same functionality as the original ScrollView but uses the ScrollBar widget, a scroll bar with rounded edges. bar_fill_color The fill color of the scroll bar. The color must be given as RGBA values, each between 0 and 1. bar_border_color The border color of the scroll bar. The color must be given as RGBA values, each between 0 and 1. bar_radius The radius of the scroll bar's corners. The scroll bar can have rounded corners. The list values correspond to the corners as follows: [upper left, upper right, lower right, lower left] scroll_x | @property | scroll_x() Returns the scroll_x value of the ScrollView child. scroll_y | @property | scroll_y() Returns the scroll_y value of the ScrollView child. vbar | @property | vbar() Returns the vbar value of the ScrollView child. smooth_scroll_end | @property | smooth_scroll_end() Returns value smooth_scroll_end of the ScrollView child. viewport_size | @property | viewport_size() Returns the viewport_size value of the ScrollView child. scroll_wheel_distance | @property | scroll_wheel_distance() Returns scroll_wheel_distance of the ScrollView child. scroll_type | @property | scroll_type() Returns the scroll_type value of the ScrollView child. scroll_timeout | @property | scroll_timeout() Returns the scroll_timeout value of the ScrollView child. scroll_distance | @property | scroll_distance() Returns the scroll_distance value of the ScrollView child. hbar | @property | hbar() Returns the hbar value of the ScrollView child. effect_y | @property | effect_y() Returns the effect_y value of the ScrollView child. effect_x | @property | effect_x() Returns the effect_x value of the ScrollView child. effect_cls | @property | effect_cls() Returns the effect_cls value of the ScrollView child. bar_pos_y | @property | bar_pos_y() Returns the bar_pos_y value of the ScrollView child. bar_pos_x | @property | bar_pos_x() Returns the bar_pos_x value of the ScrollView child. bar_pos | @property | bar_pos() Returns the bar_pos value of the ScrollView child. bar_margin | @property | bar_margin() Returns the bar_margin value of the ScrollView child. always_overscroll | @property | always_overscroll() Returns always_overscroll value of the ScrollView child. do_scroll_y | @property | do_scroll_y() Returns the do_scroll_y value of the ScrollView child. do_scroll_x | @property | do_scroll_x() Returns the do_scroll_x value of the ScrollView child. bar_width | @property | bar_width() Returns the bar_width value of the ScrollView child. scroll_x | @scroll_x.setter | scroll_x(valuex) Sets the scroll_x value of the ScrollView child. Arguments : valuex - The value to be set for the x-direction. scroll_y | @scroll_y.setter | scroll_y(valuey) Sets the scroll_y value of the ScrollView child. Arguments : valuey - The value to be set for the y-direction. vbar | @vbar.setter | vbar(value) Sets the vbar value of the ScrollView child. Arguments : value - The value to be set for vbar. smooth_scroll_end | @smooth_scroll_end.setter | smooth_scroll_end(value) Sets the smooth_scroll_end value of the ScrollView child. Arguments : value - The value to be set for smooth_scroll_end. viewport_size | @viewport_size.setter | viewport_size(value) Sets the viewport_size value of the ScrollView child. Arguments : value - The value to be set for viewport_size. scroll_wheel_distance | @scroll_wheel_distance.setter | scroll_wheel_distance(value) Sets the scroll_wheel_distance value of the ScrollView child. Arguments : value - The value to be set for scroll_wheel_distance. scroll_type | @scroll_type.setter | scroll_type(value) Sets the scroll_type value of the ScrollView child. Arguments : value - The value to be set for scroll_type. scroll_timeout | @scroll_timeout.setter | scroll_timeout(value) Sets the scroll_timeout value of the ScrollView child. Arguments : value - The value to be set for scroll_timeout. scroll_distance | @scroll_distance.setter | scroll_distance(value) Sets the scroll_distance value of the ScrollView child. Arguments : value - The value to be set for scroll_distance. hbar | @hbar.setter | hbar(value) Sets the hbar value of the ScrollView child. Arguments : value - The value to be set for hbar. effect_y | @effect_y.setter | effect_y(value) Sets the effect_y value of the ScrollView child. Arguments : value - The value to be set for effect_y. effect_x | @effect_x.setter | effect_x(value) Sets the effect_x value of the ScrollView child. Arguments : value - The value to be set for effect_x. effect_cls | @effect_cls.setter | effect_cls(value) Sets the effect_cls value of the ScrollView child. Arguments : value - The value to be set for effect_cls. bar_pos_y | @bar_pos_y.setter | bar_pos_y(value) Sets the bar_pos_y value of the ScrollView child. Arguments : value - The value to be set for bar_pos_y. bar_pos_x | @bar_pos_x.setter | bar_pos_x(value) Sets the bar_pos_x value of the ScrollView child. Arguments : value - The value to be set for bar_pos_x. bar_pos | @bar_pos.setter | bar_pos(value) Sets the bar_pos value of the ScrollView child. Arguments : value - The value to be set for bar_pos. bar_margin | @bar_margin.setter | bar_margin(value) Sets the bar_margin value of the ScrollView child. Arguments : value - The value to be set for bar_margin. always_overscroll | @always_overscroll.setter | always_overscroll(value) Sets the always_overscroll value of the ScrollView child. Arguments : value - The value to be set for always_overscroll. do_scroll_y | @do_scroll_y.setter | do_scroll_y(value) Sets the do_scroll_y value of the ScrollView child. Arguments : value - The value to be set for do_scroll_y. do_scroll_x | @do_scroll_x.setter | do_scroll_x(value) Sets the do_scroll_x value of the ScrollView child. Arguments : value - The value to be set for do_scroll_x. bar_width | @bar_width.setter | bar_width(value) Sets the bar_width value of the ScrollView child. Arguments : value - The value to be set for bar_width. add_widget | add_widget(widget: _List, index: int = 0, canvas=None) Passes on the given child to the ScrollView widget. During initialization of the widget's own child, i.e. the ScrollView and the ScrollBar widgets, the given widgets are added as children of the ScrollArea widget. After initialization is complete a widget added from outside the ScrollArea widget will be passed on to the ScrollView widget and added there. Arguments : widget - The widget to be added as child. index - The position in the widget tree. Zero means that later widgets will be drawn on top of widgets added earlier. See Kivy's documentation for details. remove_widget | remove_widget(widget: _Widget) Removes a child widget from ScrollArea or ScrollView widget. After initialization, the command is passed on to the ScrollView widget. Before initialization, the command is applied to the ScrollArea widget itself. Arguments : widget - The widget to be removed. clear_widgets | clear_widgets(children: _List = None) Removes all children from ScrollArea or ScrollView widget. After intialization, the command is passed on to the ScrollView widget. Before initialization, the command is applied to the ScrollArea widget itself. Arguments : children - A list of the current widget's child widgets. convert_distance_to_scroll | convert_distance_to_scroll(deltax: int, deltay: int) Converts a distance in pixels to a scroll distance. This method provides direct access to the interface of the ScrollView child widget. For functional details see Kivy's documentation. scroll_to | scroll_to(widget: _Widget, padding: int = 10, animate: bool = True) Scrolls the viewport to the given widget. This method provides direct access to the interface of the ScrollView child widget. For functional details see Kivy's documentation. Arguments : widget - The widget to scroll to. padding - The padding around the widget to scroll to. animate - Set to True for a scroll animation. False otherwise. update_from_scroll | update_from_scroll(*largs) Reposition the content according to scroll_x and scroll_y. This method provides direct access to the interface of the ScrollView child widget. For functional details see Kivy's documentation. on_touch_down | on_touch_down(touch: _MotionEvent) Callback method for touch / click events. If the application detects a touch or click, this method is called. It passes on the given touch motion event information to the ScrollView widget child. Arguments : touch - Motion event with details about the touch event. on_touch_move | on_touch_move(touch: _MotionEvent) Callback method for touch / cursor motion events. If the application detects a cursor or touch motion, this method is called. It passes on the given motion event information to the ScrollView widget child. Arguments : touch - Motion event with details. on_touch_up | on_touch_up(touch: _MotionEvent) Callback method for touch / cursor release events. If the application detects a cursor or touch release, this method is called. It passes on the given release event information to the ScrollView widget child. Arguments : touch - Motion event with details.","title":"API Documentation"},{"location":"api-documentation/#cucoloris","text":"","title":"cucoloris"},{"location":"api-documentation/#cucoloris_settings","text":"Defines a class for settings. The settings class is used to select the correct settings, e.g. font, for the current system.","title":"cucoloris._settings"},{"location":"api-documentation/#settings-objects","text":"class Settings() Class for determining the correct settings. Settings like the font and corrective font offset (to move the font baseline up or down for correct vertical centering) are determined by this class. These depend on the platform and the font being used. For example, on Windows, Segoe UI is used as font. Unfortunately, that font has a weird baseline, making it appear off-center, even if centered vertically. Therefore, the text has to be moved slightly.","title":"Settings Objects"},{"location":"api-documentation/#get_font_name","text":"| @staticmethod | get_font_name() -> str Returns the font name to be used for the current platform. Returns : Font name appropriate for the current platform.","title":"get_font_name"},{"location":"api-documentation/#get_font_baseline_offset","text":"| @staticmethod | get_font_baseline_offset() -> int Returns a corrective offset in y-direction. On Windows, Segoe UI is used as font. Unfortunately, that font has a weird baseline, making it appear off-center, even if centered vertically. Therefore, the text has to be moved slightly. How much, it needs to move is determined by the returned value. Returns : Vertical offset in pixels.","title":"get_font_baseline_offset"},{"location":"api-documentation/#get_scroll_threshold","text":"| @staticmethod | get_scroll_threshold() -> int Determines scroll_distance of a ScrollView widget. On a mobile device it makes sense to have a threshold before starting to scroll down. However, on a desktop computer, this behavior can quickly become annoying. Therefore, this threshold is chosen depending on the current platform.","title":"get_scroll_threshold"},{"location":"api-documentation/#get_scroll_type","text":"| @staticmethod | get_scroll_type() -> list Determines scroll_type of a ScrollView widget. On a mobile device it makes sense to have scroll down content by touching the text. However, on a desktop computer, this# behavior can quickly become annoying. In addition, it makes selecting text more difficult on a desktop computer. Therefore, the behavior is chosen depending on the platform.","title":"get_scroll_type"},{"location":"api-documentation/#cucolorisplaininput","text":"Defines a text input that fixes some bugs in Kivy.","title":"cucoloris.plaininput"},{"location":"api-documentation/#plaininput-objects","text":"class PlainInput(_TextInput) Class that provides a plain text input area. Although there is already a text input provided in Kivy, there seems to be a bug in that widget's cursor position (at least in kivy 2.0). If one types in text and reaches the end of a non-multiline text input, the cursor may overflow the text input, i.e. the cursor is outside the text input widget. This is even more present if a long text is pasted into the widget. Then, the cursor will be way outside the widget. To work around that issue, this class inherits from Kivy's text input and overwrites the necessary function. The cursor position is compared with the position of the right border of the text input. If the cursor is right of the text input, the cursor is moved to the left and to the right. This will put the cursor back into the confines of the text input. Since the movement is first left, then right, there will be no movement in sum.","title":"PlainInput Objects"},{"location":"api-documentation/#insert_text","text":"| insert_text(substring: str, from_undo: bool = False) Overwritten version of insert_text to fix the Kivy bug. Arguments : substring - The string to be added to the widget. from_undo - Set to True, if the substring is a result of an undo operation, False otherwise. Returns : The return value of the base classes version of the method.","title":"insert_text"},{"location":"api-documentation/#cucoloris_scrollbar","text":"Defines a scroll bar that fits the rounded edges of other widgets. The standard scroll bar of a ScrollView widget has sharp corners. However, that does not fit the rounded Bootstrap shapes well. Therefore, this widget defines a new scroll bar with rounded corners and the ability to define separate border and fill colors of the scroll bar.","title":"cucoloris._scrollbar"},{"location":"api-documentation/#scrollbar-objects","text":"class ScrollBar(_Box) Widget for a scroll bar with rounded corners. The standard scroll bar of a ScrollView widget has sharp corners. However, that does not fit the rounded Bootstrap shapes well. Therefore, this widget defines a new scroll bar with rounded corners and the ability to define separate border and fill colors of the scroll bar.","title":"ScrollBar Objects"},{"location":"api-documentation/#bar_orientation","text":"The orientation of the scroll bar. The orientation value may either be 'vertical' or 'horizontal'.","title":"bar_orientation"},{"location":"api-documentation/#bar_length","text":"The length of the scroll bar in pixels. Typically, the length of the scroll bar depends on the ratio of the scroll areas size and the size of the document being scrolled.","title":"bar_length"},{"location":"api-documentation/#str_vertical","text":"Constant defining the vertical scroll bar orientation value.","title":"STR_VERTICAL"},{"location":"api-documentation/#str_horizontal","text":"Constant defining the horizontal scroll bar orientation value.","title":"STR_HORIZONTAL"},{"location":"api-documentation/#bar_width","text":"The width of the scroll bar in pixels. The width of the scroll bar can be set to taste. It is given in pixels.","title":"bar_width"},{"location":"api-documentation/#on_bar_orientation","text":"| on_bar_orientation(_, orientation: str) Determines the validity of the selected orientation value. This is a callback method determines whether the selected orientation value is valid or not. If the value is valid, the scroll bar geometry gets updated. If the valid is invalid, an Exception is raised. Arguments : orientation - The desired orientation of the scroll bar. Can be either 'vertical' or 'horizontal'.","title":"on_bar_orientation"},{"location":"api-documentation/#on_bar_length","text":"| on_bar_length(_, length: int) Callback for scroll bar length changes. This is a callback method that gets called whenever the length of the scroll bar is changed. It then triggers an update of the scroll bar's dimensions. Arguments : length - The desired length of the scroll bar in pixels.","title":"on_bar_length"},{"location":"api-documentation/#cucolorisbackground","text":"Defines a background widget to create a single-color background.","title":"cucoloris.background"},{"location":"api-documentation/#background-objects","text":"class Background(_Widget) Simple single-color background. Kivy does not provide a background by default. This widget adds one that you can select the color of.","title":"Background Objects"},{"location":"api-documentation/#color","text":"Color of the background. The color must be given as RGB values, each between 0 and 1.","title":"color"},{"location":"api-documentation/#__init__","text":"| __init__(color: _Optional[list] = None, **kwargs) Initialization method of the widget. Arguments : color - The color of the background given as RGB values, each between 0 and 1. **kwargs - Keyed arguments passed on to the base class of the widget.","title":"__init__"},{"location":"api-documentation/#cucolorismarkupinput","text":"Defines a text input widget with markup support.","title":"cucoloris.markupinput"},{"location":"api-documentation/#markupinput-objects","text":"class MarkupInput(_Widget) A text input widget with markup support. Kivy's standard text input field has some bugs at the time of this writing (version 2.0). For example, the caret may leave the text input area, if text is pasted inside the input. Therefore, Cucoloris offers improved replacements, one with the addition of markup support. If the text field has focus, the text can be edited in plain text mode. Markup as described in https://kivy.org/doc/stable/api-kivy.core.text.markup.html. Markup commands can be mixed with other text. Once focus is lost, the text field is displayed with all markup formatting applied. This is done by overlaying a TextField widget with a Label widget. Opacity of the two is toggled between zero and one depending on whether to display plain or formatted text.","title":"MarkupInput Objects"},{"location":"api-documentation/#text","text":"The text in the widget.","title":"text"},{"location":"api-documentation/#markup","text":"Switch to enable or disable markup support. Set to True if you want the widget to support markup commands. False, otherwise.","title":"markup"},{"location":"api-documentation/#foreground_color","text":"Color of the text. The color is given as a list of RGBA values between 0 and 1.","title":"foreground_color"},{"location":"api-documentation/#cursor_color","text":"Color of the caret inside the text input. The color is given as a list of RGBA values between 0 and 1.","title":"cursor_color"},{"location":"api-documentation/#selection_color","text":"Color of the text selection. Note that the text selection is drawn on top of the text. Therefore, the selection color should have an alpha value. The color is given as a list of RGBA values between 0 and 1.","title":"selection_color"},{"location":"api-documentation/#hint_text_color","text":"Color of the hint text. The hint text is shown to the user to indicate what to type into the text input. The color is given as a list of RGBA values between 0 and 1.","title":"hint_text_color"},{"location":"api-documentation/#hint_text","text":"The hint text to be shown to the user. Hint texts are used to indicate what the user is supposed to type. It can be used as an alternative to other element labels.","title":"hint_text"},{"location":"api-documentation/#suggestion_text","text":"Suggestion text to display to the user. Suggestion texts can be used to increase typing speed by indicating what the user might want to type in advance. It can also act as a technique to remove dropdowns by displaying the closest values the FormControl widget is able to accept.","title":"suggestion_text"},{"location":"api-documentation/#background_color","text":"The background color of the text input. The color is given as a list of RGBA values between 0 and 1.","title":"background_color"},{"location":"api-documentation/#multiline","text":"Switch to enable or disable multiline text. Set to True, if you want the widget to support multiple lines of text. Set to False, otherwise.","title":"multiline"},{"location":"api-documentation/#write_tab","text":"Switch for either writing tabs or switching between widgets. You may select, whether a tab should lead to a loss of focus on the widget (True) or the tab is written as text into the text input (False).","title":"write_tab"},{"location":"api-documentation/#line_spacing","text":"Space between two consecutive lines. More space increases clarity but also requires a larger widget to display the same number of lines.","title":"line_spacing"},{"location":"api-documentation/#on__edit","text":"| on__edit(_, __) Toggle opacity on focus. Binds a callback method to a focus event of the TextField widget to toggle the opacity whenever the widget acquires or loses focus.","title":"on__edit"},{"location":"api-documentation/#on_focus","text":"| on_focus(_, infocus) Focus callback. The focus callback toggles the opacity between the PlainInput and the label widget.","title":"on_focus"},{"location":"api-documentation/#on_markup","text":"| on_markup(_, __) Callback method for switching markup modes. Depending on whether to use markup or not, the opacity of the PlainInput and Label child widgets is toggled.","title":"on_markup"},{"location":"api-documentation/#cucolorisformcontrol","text":"Defines a text input, equivalent to Boostrap's form-control class. In addition to standard text input functionality, the FormControl widget also supports markup text, i.e. the user can use BBCode markup commands like [b]my text[/b] to make it bold or [i]my text[/i] to make the text italic. Details about the markup commands are provided in Kivy's documentation: https://kivy.org/doc/stable/api-kivy.core.text.markup.html","title":"cucoloris.formcontrol"},{"location":"api-documentation/#formcontrol-objects","text":"class FormControl(_Box) Text input widget similar to Bootstrap's form-control class. In addition to standard text input functionality, the FormControl widget also supports markup text, i.e. the user can use BBCode markup commands like [b]my text[/b] to make it bold or [i]my text[/i] to make the text italic. Details about the markup commands are provided in Kivy's documentation: https://kivy.org/doc/stable/api-kivy.core.text.markup.html","title":"FormControl Objects"},{"location":"api-documentation/#text_color","text":"The color of the text. The color has to be given as a list of RGBA values between 0 and 1.","title":"text_color"},{"location":"api-documentation/#border_color_focus","text":"The color of the border on focus. The color has to be given as a list of RGBA values between 0 and 1.","title":"border_color_focus"},{"location":"api-documentation/#border_color_normal","text":"The color of the border without focus. The color has to be given as a list of RGBA values between 0 and 1.","title":"border_color_normal"},{"location":"api-documentation/#text_1","text":"The text displayed in the widget. The text may contain markup commands as described in the Kivy documentation: https://kivy.org/doc/stable/api-kivy.core.text.markup.html","title":"text"},{"location":"api-documentation/#padding","text":"The text padding in pixels. The text is padded to give it some space inside the box shape it resides in. The padding is given in pixels.","title":"padding"},{"location":"api-documentation/#scroll_bar_width","text":"The width of the scroll bar in pixels. The width of the scroll bar can be set to taste. It is given in pixels.","title":"scroll_bar_width"},{"location":"api-documentation/#num_lines","text":"The number of lines the FomControl widget shall display. This is the number of lines that are shown simultaneously without the need for scrolling. This attribute also determines the size of the widget, i.e. the widget's size attribute is set depending on the value of this attribute.","title":"num_lines"},{"location":"api-documentation/#line_spacing_1","text":"Space between two consecutive lines. More space increases clarity but also requires a larger widget to display the same number of lines.","title":"line_spacing"},{"location":"api-documentation/#selection_color_1","text":"The color of text selection. The selection indication is drawn on top of the text. Therefore, the color should always have an alpha component. The color is given as RGBA values between 0 and 1.","title":"selection_color"},{"location":"api-documentation/#hint_color","text":"Color of text hints. Text hints can be shown to indicate what the user should type. The color is given as a list of RGBA values between 0 and 1.","title":"hint_color"},{"location":"api-documentation/#bar_fill_color","text":"Fill color of the scroll bar. The color is given as a list of RGBA values between 0 and 1.","title":"bar_fill_color"},{"location":"api-documentation/#bar_border_color","text":"Color of the scroll bar's border. The color is given as a list of RGBA values between 0 and 1.","title":"bar_border_color"},{"location":"api-documentation/#hint_text_1","text":"The hint text to be shown to the user. Hint texts are used to indicate what the user is supposed to type. It can be used as an alternative to other element labels.","title":"hint_text"},{"location":"api-documentation/#font_size","text":"The font size to use for the FormControl widget. The font size is given in pixels.","title":"font_size"},{"location":"api-documentation/#suggestion_text_1","text":"Suggestion text to display to the user. Suggestion texts can be used to increase typing speed by indicating what the user might want to type in advance. It can also act as a technique to remove dropdowns by displaying the closest values the FormControl widget is able to accept.","title":"suggestion_text"},{"location":"api-documentation/#markup_1","text":"Determines, whether markup is recognized or not. If you want to allow for text formating using markup commands as described in the Kivy documentation (https://kivy.org/doc/stable/api-kivy.core.text.markup.html), you can set this attribute to True. If you want the FormControl widget to accept plain text only, set the value to False.","title":"markup"},{"location":"api-documentation/#__init___1","text":"| __init__(text: _Optional[str] = None, hint_text: _Optional[str] = None, suggestion_text: _Optional[str] = None, markup: bool = True, font_size: _Optional[str] = None, num_lines: _Optional[int] = None, **kwargs) Initialization method of the class. Arguments : text - The text to display in the widget. hint_text - The hint text to indicate what the user is supposed to type. suggestion_text - Suggestive text to indicate what the user might want to type next. markup - Set to True, if you want to allow text formatting using a BBCode like syntax described in https://kivy.org/doc/stable/api-kivy.core.text.markup.html. Set to False, if you want the FormControl widget to accept plain text only. font_size - The size of the font used in the widget given in pixels, e.g. '16sp'. num_lines - The number of lines to display without the need for scrolling. This parameter also determines the size of the FormControl widget. **kwargs - Keyed parameters passed on to the base class.","title":"__init__"},{"location":"api-documentation/#on_border_color_normal","text":"| on_border_color_normal(_, color) Sets the border color, if the nominal color is changed. Arguments : color - The new nominal color of the border.","title":"on_border_color_normal"},{"location":"api-documentation/#on__input","text":"| on__input(_, __) Set the font according to the current platform. There is a vertical offset for the Windows system font Segoe UI. Although the text input might be centered, the font still is not. For that reason, the padding option for Kivy's textinput widget was not used. Instead, the whole textinput is moved slightly up or down depending on the current platform.","title":"on__input"},{"location":"api-documentation/#on__scroll","text":"| on__scroll(_, __) Callback for scroll events.","title":"on__scroll"},{"location":"api-documentation/#on_edit_focus","text":"| on_edit_focus(_, value) Callback for touching the Focusable. Arguments : widget - The widget the method was called from. value - Value 1, if the widget has focus, 0 otherwise.","title":"on_edit_focus"},{"location":"api-documentation/#on_cursor_row","text":"| on_cursor_row(_, __) Callback for automatic scrolling. In a multi-line textinput, the ScrollView will not automatically scroll down if the user's text becomes too long. Using this callback, the textinput is automatically scrolled down or upwards, always keeping the cursor within the viewport.","title":"on_cursor_row"},{"location":"api-documentation/#cucoloris_colorarea","text":"Module for a color changing rectangle. This module defines the most basic shape that almost all other widgets are composed of. It is a rectangle with rounded corners that can smoothly transition to another color or resize itself. A widget that directly builds upon that functionality is RectangleElement. It is composed of two ColorArea classes to define a filled rectangle, i.e. one separate border and fill colors each of which inherit the smooth color transition functionality.","title":"cucoloris._colorarea"},{"location":"api-documentation/#colorarea-objects","text":"class ColorArea(_Widget) Rounded rectangle with animated color transitions. The ColorArea widget is a rectangle with rounded corners that can smoothly change color. The user of this class can do this using two methods: modify: The nominal color of the widget is modified in HSV-space (hue, saturation and value) using a smooth color transition. The values given are not absolute ones but differences to the current nominal color. The modification can be easily undone by calling the function with zero values for all HSV-components. recolor: Changes the nominal color by smoothly transitioning to the given color in RGBA-space (red, green, blue, alpha).","title":"ColorArea Objects"},{"location":"api-documentation/#color_1","text":"The nominal color of the widget in RGBA-space. The color is described as a list of float values between 0 and 1. It is interpreted in RGBA-space, i.e. [red, green, blue, alpha].","title":"color"},{"location":"api-documentation/#radius","text":"The radius of each corner of the widget in pixels. The ColorArea widget is a rounded rectangle. Each of the four corners may have a different radius given in pixels, e.g. [2, 4, 3, 8].","title":"radius"},{"location":"api-documentation/#transition","text":"Transition time in seconds. The ColorArea widget transitions smoothly between colors. The time it shall take from one color state to another can be set using this attribute.","title":"transition"},{"location":"api-documentation/#__init___2","text":"| __init__(size: _Optional[_List[int]] = None, radius: _Optional[_List[int]] = None, color: _Optional[_List[float]] = None, transition: _Optional[float] = None, **kwargs) Initialization method of the class. The initialization method initializes the base class and creates a rounded rectangle on the widget's canvas. Other parameter that shall be passed on to the base class may be given using the args and *kwargs parameters. Arguments : *args - Any positional arguments that shall be passed on to the base class (Widget). **kwargs - Any keyed arguments that shall be passed on to the base class (Widget).","title":"__init__"},{"location":"api-documentation/#on_size","text":"| on_size(_, size: int) Callback for size change events. Whenever the size of the widget is changed, the canvas needs to be updated. This is done in this method. Note that this method is not meant to be called by the user. Arguments : widget - The widget the method was called from. size - The new size value.","title":"on_size"},{"location":"api-documentation/#on_radius","text":"| on_radius(_, radius: _List[int]) Callback for radius change events. Whenever the radius of at least one of the widget's corners is changed, the canvas needs to be updated. This is done in this method. Note that this method is not meant to be called by the user. Arguments : widget - The widget the method was called from. radius - The new radius value.","title":"on_radius"},{"location":"api-documentation/#on_pos","text":"| on_pos(_, pos: _List[int]) Callback for position change events. Whenever the position of the widget is changed, the canvas needs to be updated. This is done in this method. Note that this method is not meant to be called by the user. Arguments : widget - The widget the method was called from. pos - The new position value.","title":"on_pos"},{"location":"api-documentation/#on_color","text":"| on_color(_, color: _List[float]) Callback for changing the nominal (unmodified) color. Whenever a color transition is performed using the recolor() method, this callback-method is called by Kivy's Animation class whenever there is a change in color. Note that this method is not meant to be called by the user. Arguments : widget - The widget the method was called from. color - The new color value.","title":"on_color"},{"location":"api-documentation/#on__hsv","text":"| on__hsv(_, hsv: _List[float]) Callback for animating the color modification in hsv space. In order to avoid weired looking color transitions, a modification of the widget's color is done in HSV-space. Therefore, this method is called whenever Kivy's Animation class calls it. Note that this method is not meant to be called by the user. Arguments : widget - The widget the method was called from. hsv - The new hsv value.","title":"on__hsv"},{"location":"api-documentation/#modify","text":"| modify(hsv: _List[float]) Shifts the widget's color in HSV-space. Modifies the nominal color of the widget in HSV-space (hue, saturation and value) using a smooth color transition. The given values are not absolute ones but differences to the current nominal color. For example, to make a widget with name myWidget slightly darker, one may call to reduce the widget's value (meaning brightness) by 0.2. The modification can be easily undone by calling the function with zero values for all HSV-components, e.g.: myWidget.modify([0, 0, -0.2]) myWidget.modify([0, 0, 0]) Arguments : hsv - List of hue, saturation, and value (brightness) values to shift the color of the widget.","title":"modify"},{"location":"api-documentation/#recolor","text":"| recolor(rgba: _List[float]) Changes the nominal color of the widget. Changes the nominal color by smoothly transitioning to the given color. The color to transition to is given as a list of float values between 0 and 1 in RGBA-space, i.e. [red, green, blue, alpha]. Unlike the modify-method, the change cannot be undone just as easily. For that, the user needs to store the old color in another variable and call recolor with that variable again. Arguments : rgba - The new color as a list in RGBA-space to transition to. Each list component is a float value between 0 and 1.","title":"recolor"},{"location":"api-documentation/#resize","text":"| resize(targetsize: _List[int], targetradius: _Optional[_List[int]] = None) Starts an animated change of the widget's size and radius. The method smoothly resizes the widget relative to its center. Both, the widget size and its radius are transformed. Arguments : targetsize - List of the size in pixels in x- and y-direction to grow or shrink the widget to. targetradius - List of radii in pixels for each of the four corners to grow or shrink to. The parameter is optional. If not given, the radius of each corner will be automatically scaled according to the given targetsize. However, it is recommended to explicitly provide a radius every once in a while (if the method is used multiple times) to avoid a summation of rounding errors.","title":"resize"},{"location":"api-documentation/#cucoloris_colorlabel","text":"Defines a label that can change color. The color shift is animated. This can be used for link-style text.","title":"cucoloris._colorlabel"},{"location":"api-documentation/#colorlabel-objects","text":"class ColorLabel(_Label) Label widget that can shift its color. The color shift is animated. This can be used for link-style text.","title":"ColorLabel Objects"},{"location":"api-documentation/#nominal_color","text":"Nominal, i.e. unmodied color of the label. The color must be given as RGBA values, each between 0 and 1.","title":"nominal_color"},{"location":"api-documentation/#transition_1","text":"Transition time in seconds. The ColorLabel widget transitions smoothly between colors. The time it shall take from one color state to another can be set using this attribute.","title":"transition"},{"location":"api-documentation/#text_2","text":"The text of the label.","title":"text"},{"location":"api-documentation/#__init___3","text":"| __init__(text: _Optional[str] = None, nominal_color: _Optional[list] = None, transition: _Optional[int] = None, **kwargs) Initialization method of the class. Arguments : text - The text of the label. nominal_color - The nominal, i.e. unmodified color of the transition - The time it takes to transition from one color to another.","title":"__init__"},{"location":"api-documentation/#on_nominal_color","text":"| on_nominal_color(_, color) Callback for changing the color. This callback method changes the nominal, i.e. unmodified color of the widget. Arguments : color - The new color value.","title":"on_nominal_color"},{"location":"api-documentation/#on__hsv_1","text":"| on__hsv(_, hsv) Callback for animating the color modification in hsv space. The color modification takes place in hue, saturation, value space in order to avoid weird red color shifts moving through several different hues instead of just the brightness (value) component of the color. Arguments : widget - The widget the method was called from. hsv - The new hsv value.","title":"on__hsv"},{"location":"api-documentation/#modify_1","text":"| modify(hsv) Shifts the widget's color in HSV-space. Modifies the nominal color of the widget in HSV-space (hue, saturation and value) using a smooth color transition. The given values are not absolute ones but differences to the current nominal color. For example, to make a widget with name myWidget slightly darker, one may call to reduce the widget's value (meaning brightness) by 0.2. The modification can be easily undone by calling the function with zero values for all HSV-components, e.g.: myWidget.modify([0, 0, -0.2]) myWidget.modify([0, 0, 0]) Arguments : hsv - List of hue, saturation, and value (brightness) values to shift the color of the widget.","title":"modify"},{"location":"api-documentation/#recolor_1","text":"| recolor(color) Changes the nominal color of the widget. Changes the nominal color by smoothly transitioning to the given color. The color to transition to is given as a list of float values between 0 and 1 in RGBA-space, i.e. [red, green, blue, alpha]. Unlike the modify-method, the change cannot be undone just as easily. For that, the user needs to store the old color in another variable and call recolor with that variable again. Arguments : rgba - The new color as a list in RGBA-space to transition to. Each list component is a float value between 0 and 1.","title":"recolor"},{"location":"api-documentation/#cucoloris_box","text":"Module for a basic box shape. This module defines a basic box with optional shadow. It has separate shadow, border and fill colors as well as rounded corners. The box is composed of three ColorArea widgets which are set up as public attributes so that they can be accessed and modified individually.","title":"cucoloris._box"},{"location":"api-documentation/#box-objects","text":"class Box(_Widget) Widget for a basic box shape. The widget represents a basic box with optional shadow. It has separate shadow, border and fill colors as well as rounded corners. The box is composed of three ColorArea widgets which are set up as public attributes so that they can be accessed and modified individually. Since each child is a ColorArea widget, the box supports smooth color transitions and size changes for each child widget. The box can detect touch and hover events that can be used to trigger custom color transitions and size changes from any derived class.","title":"Box Objects"},{"location":"api-documentation/#radius_1","text":"The radius of each corner of the widget in pixels. The Box widget is a rounded rectangle. Each of the four corners may have a different radius given in pixels, e.g. [2, 4, 3, 8].","title":"radius"},{"location":"api-documentation/#border_width","text":"The width of the widget's border. There is a solid border drawn around the widget. The width of that border can be set using this attribute.","title":"border_width"},{"location":"api-documentation/#shadow_width","text":"The width of the widget's shadow. The widget can be highlighted by a shadow in order to indicate focus or to give the widget a three-dimensional look. The width of that shadow can be adjusted by this attribute.","title":"shadow_width"},{"location":"api-documentation/#fill_color","text":"The fill color of the widget. The widget is composed of three ColorArea widgets. The color of the innermost ColorArea can be set by this attribute. It represents the fill color of the Box widget.","title":"fill_color"},{"location":"api-documentation/#border_color","text":"The color of the widget's border. There is a solid border drawn around the widget. The color of that border can be set using this attribute.","title":"border_color"},{"location":"api-documentation/#shadow_color","text":"The color of the widget's shadow. The widget can be highlighted by a shadow in order to indicate focus or to give the widget a three-dimensional look. The color of that shadow can be adjusted by this attribute.","title":"shadow_color"},{"location":"api-documentation/#transition_2","text":"Transition time in seconds. The box widget can be highlighted by a shadow in order to indicate focus. The shadow smoothly appears from behind the widget. The time it takes for the shadow to reach its final size is determined by this attribute. The attribute is also the speed with which each component can transition to another color, if needed.","title":"transition"},{"location":"api-documentation/#fill","text":"The ColorArea widget representing the fill color. The widget is composed of three ColorArea widgets. The innermost one represents the fill color. It can be accessed directly through this attribute for more control.","title":"fill"},{"location":"api-documentation/#border","text":"The ColorArea widget representing the border. The widget is composed of three ColorArea widgets. The one on the middle layer represents the border color. It can be accessed directly through this attribute for more control.","title":"border"},{"location":"api-documentation/#shadow","text":"The ColorArea widget representing the shadow. The widget is composed of three ColorArea widgets. The outermost widget represents the shadow. It can be accessed directly through this attribute for more control.","title":"shadow"},{"location":"api-documentation/#__init___4","text":"| __init__(*args, **kwargs) Initialization function of the widget. The init method is typically called without arguments. Any arguments given are passed on the the base class Widget. Arguments : *args - Positional arguments passed on to the base class. **kwargs - Keyed arguments passed on to the base class.","title":"__init__"},{"location":"api-documentation/#bind","text":"| bind(**kwargs) Bind a callback function to one an event. The Box widget can react to multiple events and call a specified callback function whenever such an event occurs. The following events are available: * on_enter: The mouse enters the widget space. * on_leave: The mouse leaves the widget space. * on_down: There is a touch or click on the widget. * on_release: The touch or click is released. * on_drag: There was a touch or click on the widget and the input device is now moved without releasing the touch or click. Arguments : **kwargs - Keyed argument list to be passed on to the bound callback function.","title":"bind"},{"location":"api-documentation/#show_shadow","text":"| show_shadow() Highlights the widget by a shadow. The box widget can be highlighted by a shadow in order to indicate focus. The shadow smoothly appears from behind the widget. If focus is lost, the shadow can disappear. This method highlights the widget by a shadow.","title":"show_shadow"},{"location":"api-documentation/#hide_shadow","text":"| hide_shadow() Hides the shadow of the widget. The box widget can be highlighted by a shadow in order to indicate focus. The shadow smoothly appears from behind the widget. If focus is lost, the shadow can be hidden by using this method.","title":"hide_shadow"},{"location":"api-documentation/#ispressed","text":"| ispressed() Returns, whether the Box is currently touched. The method will return true, if the Box widget is currently touched, i.e. the touch occured within or on the widget's border (the shadow is ignored) and has not yet been released. The method will also return true, if the touch device leaves the widget without releasing the touch (dragging). Returns : bool - True, if the widget is currently touched. False, otherwise.","title":"ispressed"},{"location":"api-documentation/#ishover","text":"| ishover() Returns, whether the cursor is hovering over the widget. The method will return true, if the cursor is currently hovering on or within the widget's border (the shadow is ignored). Returns : bool - True, if the cursor is currently hovering over the widget. False, otherwise.","title":"ishover"},{"location":"api-documentation/#on_mouse_pos","text":"| on_mouse_pos(_, pos: _List[int]) Callback function for detecting mouse movements. The method is called for each cursor movement. It is used to detect, whether the cursor hovers over the box. If the cursor starts to hover over or leaves the Box, then the callback functions for 'on_enter' or 'on_leave' are called, respectively. Note that the user must have bound a callback functions to those events prior to the event's occurrence. Otherwise, nothing happens. Arguments : pos - The new position value.","title":"on_mouse_pos"},{"location":"api-documentation/#on_touch_down","text":"| on_touch_down(touch: _MotionEvent) Callback function for detecting touches. The method is called for each touch / click from the user. The method checks whether the touch was performed on or within the border of the Box (the shadow is ignored). If so, it calls a callback function that was bound to the event 'on_press' using the bind() method of this class. Arguments : touch - Information about the touch.","title":"on_touch_down"},{"location":"api-documentation/#on_touch_up","text":"| on_touch_up(touch: _MotionEvent) Callback function for detecting touch or click releases. The method is called whenever a prior touch / click is released. If so, it calls the callback function that was bound to the event 'on_press' using the bind() method of this class. Arguments : touch - Information about the touch.","title":"on_touch_up"},{"location":"api-documentation/#on_touch_move","text":"| on_touch_move(touch: _MotionEvent) Callback function for detecting a dragging movement. The method is called whenever the input devices moves. It checks whether there was a touch or click on the Box before which corresponds to dragging the Box. If so, the methods calls the callback function that was bound to the event 'on_drag' using the bind() method of this class. Arguments : touch - Information about the touch.","title":"on_touch_move"},{"location":"api-documentation/#cucolorisbutton","text":"Defines solid and outline button widgets. This file defines button widgets for solid and outline buttons similar to the Bootstrap classes btn-primary, btn-secondary, btn-outline-primary, btn-outline-secondary, etc.","title":"cucoloris.button"},{"location":"api-documentation/#btn-objects","text":"class Btn(_FocusBehaviour, _Box) Widget for drawing a touchable / clickable button. This widget is the base class of a button that has similar behavior to the btn class of Bootstrap. From this base class the classes SolidButton and OutlineButton are derived modelling buttons similar to the btn and btn-outline classes of Bootstrap.","title":"Btn Objects"},{"location":"api-documentation/#padding_1","text":"Padding of the button's label in pixels. Buttons use the system fonts available on the device. Some fonts may have slightly weird baselines, e.g. Segoe Ui on Windows. Therefore, the padding is adjusted based on the font used.","title":"padding"},{"location":"api-documentation/#font_size_1","text":"The font size used for the button's label in pixels.","title":"font_size"},{"location":"api-documentation/#underline","text":"Determines, whether the button's label text is underlined. An underline is typically used for hyperlinks. The value can be either True (text will be underlined) or False (text will not be underlined).","title":"underline"},{"location":"api-documentation/#hover_fill","text":"HSV-color fill offsets used for hovering. If the cursor hovers over the button, its fill color is slightly modified. More precisely, its hue, saturation and brightness values are shifted by the amount specified with this attribute. Note that the values range from 0 to 1.","title":"hover_fill"},{"location":"api-documentation/#press_fill","text":"HSV-color fill offsets used, if the button is pressed. If the button is pressed, its fill color is slightly modified. More precisely, its hue, saturation and brightness values are shifted by the amount specified with this attribute. Note that the values range from 0 to 1.","title":"press_fill"},{"location":"api-documentation/#hover_text","text":"HSV-color text offsets used for hovering. If the cursor hovers over the button, its text color is slightly modified. More precisely, its hue, saturation and brightness values are shifted by the amount specified with this attribute. Note that the values range from 0 to 1.","title":"hover_text"},{"location":"api-documentation/#press_text","text":"HSV-color text offsets used, if the button is pressed. If the button is pressed, its text color is slightly modified. More precisely, its hue, saturation and brightness values are shifted by the amount specified with this attribute. Note that the values range from 0 to 1.","title":"press_text"},{"location":"api-documentation/#text_color_1","text":"The default color of the button text. The color of the button text needs to be specified as RGBA values between 0 and 1.","title":"text_color"},{"location":"api-documentation/#text_3","text":"The text with which the button is labeled. The button text also determines the button's overall size.","title":"text"},{"location":"api-documentation/#__init___5","text":"| __init__(text: str = None, font_size: str = None, text_color: _List = None, underline: bool = False, **kwargs) Initialization method of the class. Arguments : text - The text of the button. font_size - The font size of the button text in pixels. text_color - The color of the button text as RGBA values between 0 and 1. underline - Set to True to underline the button text. False, otherwise. **kwargs - Keyed arguments passed on to the base classes.","title":"__init__"},{"location":"api-documentation/#on_enter","text":"| on_enter(_) Callback for cursor hover events. If the cursor enters the button area and hovers over it, this callback method is called. It can be used to modify the button's colors.","title":"on_enter"},{"location":"api-documentation/#on_leave","text":"| on_leave(_) Callback for end of hover events. If the cursor leaves the button area and stops to hovers over it, this callback method is called. It can be used to modify the button's colors.","title":"on_leave"},{"location":"api-documentation/#on_release","text":"| on_release(_) Callback for button release events. If the button is released, this callback method is called.","title":"on_release"},{"location":"api-documentation/#on_press","text":"| on_press(_) Callback for button press events. If the button is pressed, this callback method is called.","title":"on_press"},{"location":"api-documentation/#on_focus_1","text":"| on_focus(_, value: bool) Callback for button focus events. If the button gets focus, this callback method is called. One can focus on the button by either pressing it or pressing tab until the button is focused on.","title":"on_focus"},{"location":"api-documentation/#on__label","text":"| on__label(_, __) Callback method for initializing the label. If the button label is initialized, this method is called. It is used to set the default font, font_size and padding depending on the host device and selected color scheme.","title":"on__label"},{"location":"api-documentation/#solidbtn-objects","text":"class SolidBtn(Btn) This widget represents a button with solid fill color. The widget represents a button similar to the typical Bootstrap buttons btn-primary, btn-secondary, etc. It can shift its color while the cursor is hovering over it or the button is pressed. There is also a shadow surrounding the button to indicate focus.","title":"SolidBtn Objects"},{"location":"api-documentation/#on_enter_1","text":"| on_enter(hover: bool) Callback for cursor hover events. If the cursor enters the button area and hovers over it, this callback method is called. It can be used to modify the button's colors. Arguments : hover - True, if the cursor hovers over the button. False, otherwise.","title":"on_enter"},{"location":"api-documentation/#on_leave_1","text":"| on_leave(hover: bool) Callback for end of hover events. If the cursor leaves the button area and stops to hovers over it, this callback method is called. It can be used to modify the button's colors. Arguments : hover - True, if the cursor hovers over the button. False, otherwise.","title":"on_leave"},{"location":"api-documentation/#on_release_1","text":"| on_release(touch: _MotionEvent) Callback for button release events. If the button is released, this callback method is called. Arguments : touch - Motion event with more information about the release.","title":"on_release"},{"location":"api-documentation/#on_focus_2","text":"| on_focus(_, value: bool) Callback for button focus events. If the button gets focus, this callback method is called. One can focus on the button by either pressing it or pressing tab until the button is focused on. Arguments : value - True, if the button has focus. False, otherwise.","title":"on_focus"},{"location":"api-documentation/#on_press_1","text":"| on_press(touch: _MotionEvent) Callback for button press events. If the button is pressed, this callback method is called. Arguments : touch - Motion event with more information about the release.","title":"on_press"},{"location":"api-documentation/#solidlinkbtn-objects","text":"class SolidLinkBtn(SolidBtn) A button with a solid fill color for links. The solid link button has a similar hover animation to SolidBtn. However, the color transition is applied to the link text only.","title":"SolidLinkBtn Objects"},{"location":"api-documentation/#on_leave_2","text":"| on_leave(hover: bool) Callback for end of hover events. If the cursor leaves the button area and stops to hovers over it, this callback method is called. It can be used to modify the button's colors. Arguments : hover - True, if the cursor hovers over the button. False, otherwise.","title":"on_leave"},{"location":"api-documentation/#outlinebtn-objects","text":"class OutlineBtn(Btn) Button widget with no fill color. The outline button has a hover animation that transitions its fill color from background color to the border color while often switching the text color from border color to white. It is similar to the Bootstrap button classes btn-outline-primary, btn-outline-secondary, etc.","title":"OutlineBtn Objects"},{"location":"api-documentation/#on_enter_2","text":"| on_enter(_) Callback for cursor hover events. If the cursor enters the button area and hovers over it, this callback method is called. It can be used to modify the button's colors.","title":"on_enter"},{"location":"api-documentation/#on_leave_3","text":"| on_leave(_) Callback for end of hover events. If the cursor leaves the button area and stops to hovers over it, this callback method is called. It can be used to modify the button's colors.","title":"on_leave"},{"location":"api-documentation/#on_release_2","text":"| on_release(_) Callback for button release events. If the button is released, this callback method is called.","title":"on_release"},{"location":"api-documentation/#on_focus_3","text":"| on_focus(_, value: bool) Callback for button focus events. If the button gets focus, this callback method is called. One can focus on the button by either pressing it or pressing tab until the button is focused on. Arguments : value - True, if the button has focus. False, otherwise.","title":"on_focus"},{"location":"api-documentation/#on_press_2","text":"| on_press(touch: _MotionEvent) Callback for button press events. If the button is pressed, this callback method is called. Arguments : touch - Motion event with more information about the release.","title":"on_press"},{"location":"api-documentation/#cucoloris_scrollarea","text":"Defines a ScrollArea widget. Kivy's ScrollView widget has a scroll bar with sharp corners. However, that does not fit the rounded Bootstrap shapes well. Therefore, this widget has the same functionality as the original ScrollView but uses the ScrollBar widget, a scroll bar with rounded edges.","title":"cucoloris._scrollarea"},{"location":"api-documentation/#scrollarea-objects","text":"class ScrollArea(_Widget) Replacement for Kivy's ScrollView widget. Kivy's ScrollView widget has a scroll bar with sharp corners. However, that does not fit the rounded Bootstrap shapes well. Therefore, this widget has the same functionality as the original ScrollView but uses the ScrollBar widget, a scroll bar with rounded edges.","title":"ScrollArea Objects"},{"location":"api-documentation/#bar_fill_color_1","text":"The fill color of the scroll bar. The color must be given as RGBA values, each between 0 and 1.","title":"bar_fill_color"},{"location":"api-documentation/#bar_border_color_1","text":"The border color of the scroll bar. The color must be given as RGBA values, each between 0 and 1.","title":"bar_border_color"},{"location":"api-documentation/#bar_radius","text":"The radius of the scroll bar's corners. The scroll bar can have rounded corners. The list values correspond to the corners as follows: [upper left, upper right, lower right, lower left]","title":"bar_radius"},{"location":"api-documentation/#scroll_x","text":"| @property | scroll_x() Returns the scroll_x value of the ScrollView child.","title":"scroll_x"},{"location":"api-documentation/#scroll_y","text":"| @property | scroll_y() Returns the scroll_y value of the ScrollView child.","title":"scroll_y"},{"location":"api-documentation/#vbar","text":"| @property | vbar() Returns the vbar value of the ScrollView child.","title":"vbar"},{"location":"api-documentation/#smooth_scroll_end","text":"| @property | smooth_scroll_end() Returns value smooth_scroll_end of the ScrollView child.","title":"smooth_scroll_end"},{"location":"api-documentation/#viewport_size","text":"| @property | viewport_size() Returns the viewport_size value of the ScrollView child.","title":"viewport_size"},{"location":"api-documentation/#scroll_wheel_distance","text":"| @property | scroll_wheel_distance() Returns scroll_wheel_distance of the ScrollView child.","title":"scroll_wheel_distance"},{"location":"api-documentation/#scroll_type","text":"| @property | scroll_type() Returns the scroll_type value of the ScrollView child.","title":"scroll_type"},{"location":"api-documentation/#scroll_timeout","text":"| @property | scroll_timeout() Returns the scroll_timeout value of the ScrollView child.","title":"scroll_timeout"},{"location":"api-documentation/#scroll_distance","text":"| @property | scroll_distance() Returns the scroll_distance value of the ScrollView child.","title":"scroll_distance"},{"location":"api-documentation/#hbar","text":"| @property | hbar() Returns the hbar value of the ScrollView child.","title":"hbar"},{"location":"api-documentation/#effect_y","text":"| @property | effect_y() Returns the effect_y value of the ScrollView child.","title":"effect_y"},{"location":"api-documentation/#effect_x","text":"| @property | effect_x() Returns the effect_x value of the ScrollView child.","title":"effect_x"},{"location":"api-documentation/#effect_cls","text":"| @property | effect_cls() Returns the effect_cls value of the ScrollView child.","title":"effect_cls"},{"location":"api-documentation/#bar_pos_y","text":"| @property | bar_pos_y() Returns the bar_pos_y value of the ScrollView child.","title":"bar_pos_y"},{"location":"api-documentation/#bar_pos_x","text":"| @property | bar_pos_x() Returns the bar_pos_x value of the ScrollView child.","title":"bar_pos_x"},{"location":"api-documentation/#bar_pos","text":"| @property | bar_pos() Returns the bar_pos value of the ScrollView child.","title":"bar_pos"},{"location":"api-documentation/#bar_margin","text":"| @property | bar_margin() Returns the bar_margin value of the ScrollView child.","title":"bar_margin"},{"location":"api-documentation/#always_overscroll","text":"| @property | always_overscroll() Returns always_overscroll value of the ScrollView child.","title":"always_overscroll"},{"location":"api-documentation/#do_scroll_y","text":"| @property | do_scroll_y() Returns the do_scroll_y value of the ScrollView child.","title":"do_scroll_y"},{"location":"api-documentation/#do_scroll_x","text":"| @property | do_scroll_x() Returns the do_scroll_x value of the ScrollView child.","title":"do_scroll_x"},{"location":"api-documentation/#bar_width_1","text":"| @property | bar_width() Returns the bar_width value of the ScrollView child.","title":"bar_width"},{"location":"api-documentation/#scroll_x_1","text":"| @scroll_x.setter | scroll_x(valuex) Sets the scroll_x value of the ScrollView child. Arguments : valuex - The value to be set for the x-direction.","title":"scroll_x"},{"location":"api-documentation/#scroll_y_1","text":"| @scroll_y.setter | scroll_y(valuey) Sets the scroll_y value of the ScrollView child. Arguments : valuey - The value to be set for the y-direction.","title":"scroll_y"},{"location":"api-documentation/#vbar_1","text":"| @vbar.setter | vbar(value) Sets the vbar value of the ScrollView child. Arguments : value - The value to be set for vbar.","title":"vbar"},{"location":"api-documentation/#smooth_scroll_end_1","text":"| @smooth_scroll_end.setter | smooth_scroll_end(value) Sets the smooth_scroll_end value of the ScrollView child. Arguments : value - The value to be set for smooth_scroll_end.","title":"smooth_scroll_end"},{"location":"api-documentation/#viewport_size_1","text":"| @viewport_size.setter | viewport_size(value) Sets the viewport_size value of the ScrollView child. Arguments : value - The value to be set for viewport_size.","title":"viewport_size"},{"location":"api-documentation/#scroll_wheel_distance_1","text":"| @scroll_wheel_distance.setter | scroll_wheel_distance(value) Sets the scroll_wheel_distance value of the ScrollView child. Arguments : value - The value to be set for scroll_wheel_distance.","title":"scroll_wheel_distance"},{"location":"api-documentation/#scroll_type_1","text":"| @scroll_type.setter | scroll_type(value) Sets the scroll_type value of the ScrollView child. Arguments : value - The value to be set for scroll_type.","title":"scroll_type"},{"location":"api-documentation/#scroll_timeout_1","text":"| @scroll_timeout.setter | scroll_timeout(value) Sets the scroll_timeout value of the ScrollView child. Arguments : value - The value to be set for scroll_timeout.","title":"scroll_timeout"},{"location":"api-documentation/#scroll_distance_1","text":"| @scroll_distance.setter | scroll_distance(value) Sets the scroll_distance value of the ScrollView child. Arguments : value - The value to be set for scroll_distance.","title":"scroll_distance"},{"location":"api-documentation/#hbar_1","text":"| @hbar.setter | hbar(value) Sets the hbar value of the ScrollView child. Arguments : value - The value to be set for hbar.","title":"hbar"},{"location":"api-documentation/#effect_y_1","text":"| @effect_y.setter | effect_y(value) Sets the effect_y value of the ScrollView child. Arguments : value - The value to be set for effect_y.","title":"effect_y"},{"location":"api-documentation/#effect_x_1","text":"| @effect_x.setter | effect_x(value) Sets the effect_x value of the ScrollView child. Arguments : value - The value to be set for effect_x.","title":"effect_x"},{"location":"api-documentation/#effect_cls_1","text":"| @effect_cls.setter | effect_cls(value) Sets the effect_cls value of the ScrollView child. Arguments : value - The value to be set for effect_cls.","title":"effect_cls"},{"location":"api-documentation/#bar_pos_y_1","text":"| @bar_pos_y.setter | bar_pos_y(value) Sets the bar_pos_y value of the ScrollView child. Arguments : value - The value to be set for bar_pos_y.","title":"bar_pos_y"},{"location":"api-documentation/#bar_pos_x_1","text":"| @bar_pos_x.setter | bar_pos_x(value) Sets the bar_pos_x value of the ScrollView child. Arguments : value - The value to be set for bar_pos_x.","title":"bar_pos_x"},{"location":"api-documentation/#bar_pos_1","text":"| @bar_pos.setter | bar_pos(value) Sets the bar_pos value of the ScrollView child. Arguments : value - The value to be set for bar_pos.","title":"bar_pos"},{"location":"api-documentation/#bar_margin_1","text":"| @bar_margin.setter | bar_margin(value) Sets the bar_margin value of the ScrollView child. Arguments : value - The value to be set for bar_margin.","title":"bar_margin"},{"location":"api-documentation/#always_overscroll_1","text":"| @always_overscroll.setter | always_overscroll(value) Sets the always_overscroll value of the ScrollView child. Arguments : value - The value to be set for always_overscroll.","title":"always_overscroll"},{"location":"api-documentation/#do_scroll_y_1","text":"| @do_scroll_y.setter | do_scroll_y(value) Sets the do_scroll_y value of the ScrollView child. Arguments : value - The value to be set for do_scroll_y.","title":"do_scroll_y"},{"location":"api-documentation/#do_scroll_x_1","text":"| @do_scroll_x.setter | do_scroll_x(value) Sets the do_scroll_x value of the ScrollView child. Arguments : value - The value to be set for do_scroll_x.","title":"do_scroll_x"},{"location":"api-documentation/#bar_width_2","text":"| @bar_width.setter | bar_width(value) Sets the bar_width value of the ScrollView child. Arguments : value - The value to be set for bar_width.","title":"bar_width"},{"location":"api-documentation/#add_widget","text":"| add_widget(widget: _List, index: int = 0, canvas=None) Passes on the given child to the ScrollView widget. During initialization of the widget's own child, i.e. the ScrollView and the ScrollBar widgets, the given widgets are added as children of the ScrollArea widget. After initialization is complete a widget added from outside the ScrollArea widget will be passed on to the ScrollView widget and added there. Arguments : widget - The widget to be added as child. index - The position in the widget tree. Zero means that later widgets will be drawn on top of widgets added earlier. See Kivy's documentation for details.","title":"add_widget"},{"location":"api-documentation/#remove_widget","text":"| remove_widget(widget: _Widget) Removes a child widget from ScrollArea or ScrollView widget. After initialization, the command is passed on to the ScrollView widget. Before initialization, the command is applied to the ScrollArea widget itself. Arguments : widget - The widget to be removed.","title":"remove_widget"},{"location":"api-documentation/#clear_widgets","text":"| clear_widgets(children: _List = None) Removes all children from ScrollArea or ScrollView widget. After intialization, the command is passed on to the ScrollView widget. Before initialization, the command is applied to the ScrollArea widget itself. Arguments : children - A list of the current widget's child widgets.","title":"clear_widgets"},{"location":"api-documentation/#convert_distance_to_scroll","text":"| convert_distance_to_scroll(deltax: int, deltay: int) Converts a distance in pixels to a scroll distance. This method provides direct access to the interface of the ScrollView child widget. For functional details see Kivy's documentation.","title":"convert_distance_to_scroll"},{"location":"api-documentation/#scroll_to","text":"| scroll_to(widget: _Widget, padding: int = 10, animate: bool = True) Scrolls the viewport to the given widget. This method provides direct access to the interface of the ScrollView child widget. For functional details see Kivy's documentation. Arguments : widget - The widget to scroll to. padding - The padding around the widget to scroll to. animate - Set to True for a scroll animation. False otherwise.","title":"scroll_to"},{"location":"api-documentation/#update_from_scroll","text":"| update_from_scroll(*largs) Reposition the content according to scroll_x and scroll_y. This method provides direct access to the interface of the ScrollView child widget. For functional details see Kivy's documentation.","title":"update_from_scroll"},{"location":"api-documentation/#on_touch_down_1","text":"| on_touch_down(touch: _MotionEvent) Callback method for touch / click events. If the application detects a touch or click, this method is called. It passes on the given touch motion event information to the ScrollView widget child. Arguments : touch - Motion event with details about the touch event.","title":"on_touch_down"},{"location":"api-documentation/#on_touch_move_1","text":"| on_touch_move(touch: _MotionEvent) Callback method for touch / cursor motion events. If the application detects a cursor or touch motion, this method is called. It passes on the given motion event information to the ScrollView widget child. Arguments : touch - Motion event with details.","title":"on_touch_move"},{"location":"api-documentation/#on_touch_up_1","text":"| on_touch_up(touch: _MotionEvent) Callback method for touch / cursor release events. If the application detects a cursor or touch release, this method is called. It passes on the given release event information to the ScrollView widget child. Arguments : touch - Motion event with details.","title":"on_touch_up"}]}